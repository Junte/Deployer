variables:
  DOCKER_DRIVER: overlay2
  DOCKER_CACHE_IMAGE: $CI_REGISTRY_IMAGE/tmp:latest
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE/tmp:${CI_PIPELINE_ID}
  GIT_DEPTH: 1

stages:
  - pre_build
  - build
  - test
  - release

lint:docker:
  image: hadolint/hadolint:v1.19.0-44-gf364c91-debian
  stage: pre_build
  script:
    - hadolint Dockerfile

lint:golang:
  image: golangci/golangci-lint:v1.33
  stage: pre_build
  script:
    - golangci-lint run

build:
  stage: build
  image: docker:19
  services:
    - docker:19-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker pull $DOCKER_CACHE_IMAGE || true
    - docker build --cache-from $DOCKER_CACHE_IMAGE -t $DOCKER_IMAGE -t $DOCKER_CACHE_IMAGE .
    - docker push $DOCKER_CACHE_IMAGE
    - docker push $DOCKER_IMAGE
    - docker run -v $(pwd)/bin:/mnt/bin $DOCKER_IMAGE cp bin/deployer /mnt/bin
    - echo "APP_VERSION=$(cat VERSION)" >> app.env
  artifacts:
    reports:
      dotenv: app.env
    paths:
      - bin/deployer

test:
  stage: test
  image: $DOCKER_IMAGE
  script:
    - go test -p 1  -v ./...


release:bin:
  image: alpine:3
  stage: release
  only:
    - master
  script:
    - echo "release v${APP_VERSION}"
    - cp bin/deployer deployer
  artifacts:
    name: "deployer-v$APP_VERSION"
    paths:
      - deployer
